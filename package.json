{
  "name": "cargo-tools",
  "displayName": "Cargo Tools",
  "description": "Rust development tools for VSCode with build profiles, targets, and workspace integration",
  "version": "0.0.1",
  "publisher": "cargo-tools",
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "rust",
    "cargo",
    "build",
    "development"
  ],
  "activationEvents": [
    "workspaceContains:Cargo.toml"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cargo-tools.selectProfile",
        "title": "Select Build Profile",
        "category": "Cargo Tools",
        "icon": "$(settings-gear)"
      },
      {
        "command": "cargo-tools.selectPackage",
        "title": "Select Package",
        "category": "Cargo Tools",
        "icon": "$(package)"
      },
      {
        "command": "cargo-tools.selectBuildTarget",
        "title": "Select Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.selectRunTarget",
        "title": "Select Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.selectBenchmarkTarget",
        "title": "Select Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.selectPlatformTarget",
        "title": "Select Platform Target",
        "category": "Cargo Tools",
        "icon": "$(device-desktop)"
      },
      {
        "command": "cargo-tools.installPlatformTarget",
        "title": "Install Platform Target",
        "category": "Cargo Tools",
        "icon": "$(cloud-download)"
      },
      {
        "command": "cargo-tools.buildDocs",
        "title": "Build Documentation",
        "category": "Cargo Tools",
        "icon": "$(book)"
      },
      {
        "command": "cargo-tools.selectFeatures",
        "title": "Select Features",
        "category": "Cargo Tools",
        "icon": "$(list-unordered)"
      },
      {
        "command": "cargo-tools.refresh",
        "title": "Refresh",
        "category": "Cargo Tools",
        "icon": "$(refresh)"
      },
      {
        "command": "cargo-tools.projectStatus.build",
        "title": "Build",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectStatus.run",
        "title": "Run",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectStatus.test",
        "title": "Test",
        "category": "Cargo Tools",
        "icon": "$(beaker)"
      },
      {
        "command": "cargo-tools.projectStatus.bench",
        "title": "Benchmark",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.projectOutline.selectPackage",
        "title": "Select Package",
        "category": "Cargo Tools",
        "icon": "$(check)"
      },
      {
        "command": "cargo-tools.projectOutline.unselectPackage",
        "title": "Unselect Package",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setBuildTarget",
        "title": "Set as Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetBuildTarget",
        "title": "Unset Build Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setRunTarget",
        "title": "Set as Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetRunTarget",
        "title": "Unset Run Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setBenchmarkTarget",
        "title": "Set as Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
        "title": "Unset Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.buildPackage",
        "title": "Build Package",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.testPackage",
        "title": "Test Package",
        "category": "Cargo Tools",
        "icon": "$(beaker)"
      },
      {
        "command": "cargo-tools.projectOutline.buildTarget",
        "title": "Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.runTarget",
        "title": "Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectOutline.benchTarget",
        "title": "Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cargoTools",
          "title": "Cargo Tools",
          "icon": "$(package)"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "cargoToolsExplorer",
          "name": "Cargo Tools",
          "when": "cargoTools:workspaceHasCargo"
        }
      ],
      "cargoTools": [
        {
          "id": "cargoToolsProjectStatus",
          "name": "Project Status",
          "when": "cargoTools:workspaceHasCargo"
        },
        {
          "id": "cargoToolsProjectOutline",
          "name": "Project Outline",
          "when": "cargoTools:workspaceHasCargo"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "cargo-tools.refresh",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        },
        {
          "command": "cargo-tools.buildDocs",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        },
        {
          "command": "cargo-tools.installPlatformTarget",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cargo-tools.projectOutline.selectPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember.*canBeSelectedPackage/",
          "group": "selection@1"
        },
        {
          "command": "cargo-tools.projectOutline.unselectPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember.*isSelectedPackage/",
          "group": "selection@2"
        },
        {
          "command": "cargo-tools.projectOutline.setBuildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedBuildTarget/",
          "group": "build@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBuildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedBuildTarget/",
          "group": "build@2"
        },
        {
          "command": "cargo-tools.projectOutline.setRunTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedRunTarget/",
          "group": "run@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetRunTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedRunTarget/",
          "group": "run@2"
        },
        {
          "command": "cargo-tools.projectOutline.setBenchmarkTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedBenchmarkTarget/",
          "group": "benchmark@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedBenchmarkTarget/",
          "group": "benchmark@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "actions@1"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "actions@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBuild/",
          "group": "actions@1"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsRun/",
          "group": "actions@2"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBench/",
          "group": "actions@3"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "inline@1"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "inline@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBuild/",
          "group": "inline@1"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsRun/",
          "group": "inline@2"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBench/",
          "group": "inline@3"
        },
        {
          "command": "cargo-tools.projectStatus.build",
          "when": "view == cargoToolsProjectStatus && viewItem == buildTargetSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectStatus.run",
          "when": "view == cargoToolsProjectStatus && viewItem == runTargetSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectStatus.test",
          "when": "view == cargoToolsProjectStatus && viewItem == packageSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectStatus.bench",
          "when": "view == cargoToolsProjectStatus && viewItem == benchmarkTargetSelection",
          "group": "inline"
        }
      ],
      "commandPalette": [
        {
          "command": "cargo-tools.projectOutline.selectPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unselectPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setBuildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBuildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setRunTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetRunTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setBenchmarkTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "never"
        }
      ]
    },
    "configuration": {
      "title": "Cargo Tools",
      "properties": {
        "cargoTools.defaultProfile": {
          "type": "string",
          "default": "dev",
          "description": "Default build profile to use",
          "enum": [
            "dev",
            "release"
          ],
          "enumDescriptions": [
            "Development profile with debug information",
            "Release profile with optimizations"
          ]
        },
        "cargoTools.cargoPath": {
          "type": "string",
          "default": "cargo",
          "description": "Path to the cargo executable"
        },
        "cargoTools.buildArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo build"
        },
        "cargoTools.runArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo run"
        },
        "cargoTools.testArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo test"
        },
        "cargoTools.environment": {
          "type": "object",
          "default": {},
          "description": "Environment variables to set when running cargo commands"
        },
        "cargoTools.features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Default features to enable"
        },
        "cargoTools.allFeatures": {
          "type": "boolean",
          "default": false,
          "description": "Enable all features by default"
        },
        "cargoTools.noDefaultFeatures": {
          "type": "boolean",
          "default": false,
          "description": "Disable default features"
        },
        "cargoTools.groupTargetsByWorkspaceMember": {
          "type": "boolean",
          "default": true,
          "description": "Group targets by workspace member in the BUILD TARGETS tree view. When enabled, targets are first organized by workspace member, then by type (bin, lib, etc.). When disabled, targets are grouped directly by type."
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "cargo",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "The cargo command to run"
          },
          "profile": {
            "type": "string",
            "description": "The build profile to use"
          },
          "target": {
            "type": "string",
            "description": "The target to build"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Features to enable"
          },
          "allFeatures": {
            "type": "boolean",
            "description": "Enable all features"
          },
          "noDefaultFeatures": {
            "type": "boolean",
            "description": "Disable default features"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.102.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "eslint": "^9.25.1",
    "typescript": "^5.8.3",
    "ts-loader": "^9.5.2",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2"
  }
}