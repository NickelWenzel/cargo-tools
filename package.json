{
  "name": "cargo-tools",
  "displayName": "Cargo Tools",
  "description": "Rust development tools for VSCode with build profiles, targets, and workspace integration",
  "version": "0.0.1",
  "publisher": "cargo-tools",
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "rust",
    "cargo",
    "build",
    "development"
  ],
  "activationEvents": [
    "workspaceContains:Cargo.toml"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cargo-tools.selectProfile",
        "title": "Select Build Profile",
        "category": "Cargo Tools",
        "icon": "$(settings-gear)"
      },
      {
        "command": "cargo-tools.selectPackage",
        "title": "Select Package",
        "category": "Cargo Tools",
        "icon": "$(package)"
      },
      {
        "command": "cargo-tools.selectBuildTarget",
        "title": "Select Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.selectRunTarget",
        "title": "Select Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.selectBenchmarkTarget",
        "title": "Select Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.selectPlatformTarget",
        "title": "Select Platform Target",
        "category": "Cargo Tools",
        "icon": "$(device-desktop)"
      },
      {
        "command": "cargo-tools.installPlatformTarget",
        "title": "Install Platform Target",
        "category": "Cargo Tools",
        "icon": "$(cloud-download)"
      },
      {
        "command": "cargo-tools.setRustAnalyzerCheckTargets",
        "title": "Set rust-analyzer check targets",
        "category": "Cargo Tools",
        "icon": "$(checklist)"
      },
      {
        "command": "cargo-tools.buildDocs",
        "title": "Build Documentation",
        "category": "Cargo Tools",
        "icon": "$(book)"
      },
      {
        "command": "cargo-tools.selectFeatures",
        "title": "Select Features",
        "category": "Cargo Tools",
        "icon": "$(list-unordered)"
      },
      {
        "command": "cargo-tools.refresh",
        "title": "Refresh",
        "category": "Cargo Tools",
        "icon": "$(refresh)"
      },
      {
        "command": "cargo-tools.makefile.runTask",
        "title": "Run Makefile Task",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.makefile.setTaskFilter",
        "title": "Filter Tasks",
        "category": "Cargo Tools",
        "icon": "$(filter)"
      },
      {
        "command": "cargo-tools.makefile.editTaskFilter",
        "title": "Edit Task Filter",
        "category": "Cargo Tools",
        "icon": "$(edit)"
      },
      {
        "command": "cargo-tools.makefile.clearTaskFilter",
        "title": "Clear Task Filter",
        "category": "Cargo Tools",
        "icon": "$(clear-all)"
      },
      {
        "command": "cargo-tools.makefile.showCategoryFilter",
        "title": "Filter Categories",
        "category": "Cargo Tools",
        "icon": "$(symbol-class)"
      },
      {
        "command": "cargo-tools.makefile.clearCategoryFilter",
        "title": "Clear Category Filter",
        "category": "Cargo Tools",
        "icon": "$(clear-all)"
      },
      {
        "command": "cargo-tools.projectStatus.build",
        "title": "Build",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectStatus.run",
        "title": "Run",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectStatus.debug",
        "title": "Debug",
        "category": "Cargo Tools",
        "icon": "$(debug-alt)"
      },
      {
        "command": "cargo-tools.projectStatus.test",
        "title": "Test",
        "category": "Cargo Tools",
        "icon": "$(beaker)"
      },
      {
        "command": "cargo-tools.projectStatus.bench",
        "title": "Benchmark",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.projectOutline.selectPackage",
        "title": "Select Package",
        "category": "Cargo Tools",
        "icon": "$(check)"
      },
      {
        "command": "cargo-tools.projectOutline.unselectPackage",
        "title": "Unselect Package",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setBuildTarget",
        "title": "Set as Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetBuildTarget",
        "title": "Unset Build Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setRunTarget",
        "title": "Set as Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetRunTarget",
        "title": "Unset Run Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.setBenchmarkTarget",
        "title": "Set as Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
        "title": "Unset Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(close)"
      },
      {
        "command": "cargo-tools.projectOutline.buildPackage",
        "title": "Build Package",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.testPackage",
        "title": "Test Package",
        "category": "Cargo Tools",
        "icon": "$(beaker)"
      },
      {
        "command": "cargo-tools.projectOutline.buildTarget",
        "title": "Build Target",
        "category": "Cargo Tools",
        "icon": "$(tools)"
      },
      {
        "command": "cargo-tools.projectOutline.runTarget",
        "title": "Run Target",
        "category": "Cargo Tools",
        "icon": "$(play)"
      },
      {
        "command": "cargo-tools.projectOutline.debugTarget",
        "title": "Debug Target",
        "category": "Cargo Tools",
        "icon": "$(debug-alt)"
      },
      {
        "command": "cargo-tools.projectOutline.benchTarget",
        "title": "Benchmark Target",
        "category": "Cargo Tools",
        "icon": "$(dashboard)"
      },
      {
        "command": "cargo-tools.projectOutline.setWorkspaceMemberFilter",
        "title": "Filter Workspace Members",
        "category": "Cargo Tools",
        "icon": "$(filter)"
      },
      {
        "command": "cargo-tools.projectOutline.editWorkspaceMemberFilter",
        "title": "Edit Member Filter",
        "category": "Cargo Tools",
        "icon": "$(edit)"
      },
      {
        "command": "cargo-tools.projectOutline.clearWorkspaceMemberFilter",
        "title": "Clear Member Filter",
        "category": "Cargo Tools",
        "icon": "$(clear-all)"
      },
      {
        "command": "cargo-tools.projectOutline.showTargetTypeFilter",
        "title": "Filter Target Types",
        "category": "Cargo Tools",
        "icon": "$(symbol-class)"
      },
      {
        "command": "cargo-tools.projectOutline.clearTargetTypeFilter",
        "title": "Clear Type Filter",
        "category": "Cargo Tools",
        "icon": "$(clear-all)"
      },
      {
        "command": "cargo-tools.projectOutline.clearAllFilters",
        "title": "Clear All Filters",
        "category": "Cargo Tools",
        "icon": "$(clear-all)"
      },
      {
        "command": "cargo-tools.projectOutline.toggleWorkspaceMemberGrouping",
        "title": "Toggle Workspace Member Grouping",
        "category": "Cargo Tools",
        "icon": "$(group-by-ref-type)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cargoTools",
          "title": "Cargo Tools",
          "icon": "$(package)"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "cargoToolsExplorer",
          "name": "Cargo Tools",
          "when": "cargoTools:workspaceHasCargo"
        }
      ],
      "cargoTools": [
        {
          "id": "cargoToolsProjectStatus",
          "name": "Project Status",
          "when": "cargoTools:workspaceHasCargo"
        },
        {
          "id": "cargoToolsProjectOutline",
          "name": "Project Outline",
          "when": "cargoTools:workspaceHasCargo"
        },
        {
          "id": "cargoToolsMakefile",
          "name": "Makefile",
          "when": "cargoTools:workspaceHasCargo && cargoTools:workspaceHasMakefile",
          "icon": "$(tools)"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "cargo-tools.refresh",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        },
        {
          "command": "cargo-tools.buildDocs",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        },
        {
          "command": "cargo-tools.installPlatformTarget",
          "when": "view == cargoToolsProjectStatus",
          "group": "navigation"
        },
        {
          "command": "cargo-tools.projectOutline.setWorkspaceMemberFilter",
          "when": "view == cargoToolsProjectOutline",
          "group": "navigation@1"
        },
        {
          "command": "cargo-tools.projectOutline.showTargetTypeFilter",
          "when": "view == cargoToolsProjectOutline",
          "group": "navigation@2"
        },
        {
          "command": "cargo-tools.projectOutline.clearAllFilters",
          "when": "view == cargoToolsProjectOutline",
          "group": "navigation@3"
        },
        {
          "command": "cargo-tools.projectOutline.toggleWorkspaceMemberGrouping",
          "when": "view == cargoToolsProjectOutline",
          "group": "navigation@4"
        },
        {
          "command": "cargo-tools.makefile.setTaskFilter",
          "when": "view == cargoToolsMakefile",
          "group": "navigation@1"
        },
        {
          "command": "cargo-tools.makefile.showCategoryFilter",
          "when": "view == cargoToolsMakefile",
          "group": "navigation@2"
        },
        {
          "command": "cargo-tools.makefile.clearTaskFilter",
          "when": "view == cargoToolsMakefile",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "cargo-tools.projectOutline.selectPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember.*canBeSelectedPackage/",
          "group": "selection@1"
        },
        {
          "command": "cargo-tools.projectOutline.unselectPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember.*isSelectedPackage/",
          "group": "selection@2"
        },
        {
          "command": "cargo-tools.projectOutline.setBuildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedBuildTarget/",
          "group": "build@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBuildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedBuildTarget/",
          "group": "build@2"
        },
        {
          "command": "cargo-tools.projectOutline.setRunTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedRunTarget/",
          "group": "run@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetRunTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedRunTarget/",
          "group": "run@2"
        },
        {
          "command": "cargo-tools.projectOutline.setBenchmarkTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*canBeSelectedBenchmarkTarget/",
          "group": "benchmark@1"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*isSelectedBenchmarkTarget/",
          "group": "benchmark@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "actions@1"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "actions@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBuild/",
          "group": "actions@1"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsRun/",
          "group": "actions@2"
        },
        {
          "command": "cargo-tools.projectOutline.debugTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsDebug/",
          "group": "actions@3"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBench/",
          "group": "actions@4"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "inline@1"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /workspaceMember/",
          "group": "inline@2"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBuild/",
          "group": "inline@1"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsRun/",
          "group": "inline@2"
        },
        {
          "command": "cargo-tools.projectOutline.debugTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsDebug/",
          "group": "inline@3"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /cargoTarget.*supportsBench/",
          "group": "inline@4"
        },
        {
          "command": "cargo-tools.projectStatus.build",
          "when": "view == cargoToolsProjectStatus && viewItem == buildTargetSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectStatus.run",
          "when": "view == cargoToolsProjectStatus && viewItem == runTargetSelection",
          "group": "inline@1"
        },
        {
          "command": "cargo-tools.projectStatus.debug",
          "when": "view == cargoToolsProjectStatus && viewItem == runTargetSelection",
          "group": "inline@2"
        },
        {
          "command": "cargo-tools.projectStatus.test",
          "when": "view == cargoToolsProjectStatus && viewItem == packageSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectStatus.bench",
          "when": "view == cargoToolsProjectStatus && viewItem == benchmarkTargetSelection",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectOutline.setWorkspaceMemberFilter",
          "when": "view == cargoToolsProjectOutline && viewItem == memberFilter",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectOutline.clearWorkspaceMemberFilter",
          "when": "view == cargoToolsProjectOutline && viewItem == memberFilter",
          "group": "modify@1"
        },
        {
          "command": "cargo-tools.projectOutline.showTargetTypeFilter",
          "when": "view == cargoToolsProjectOutline && viewItem == typeFilter",
          "group": "inline"
        },
        {
          "command": "cargo-tools.projectOutline.clearTargetTypeFilter",
          "when": "view == cargoToolsProjectOutline && viewItem == typeFilter",
          "group": "modify@1"
        },
        {
          "command": "cargo-tools.projectOutline.clearAllFilters",
          "when": "view == cargoToolsProjectOutline && viewItem =~ /memberFilter|typeFilter/",
          "group": "modify@2"
        }
      ],
      "commandPalette": [
        {
          "command": "cargo-tools.projectOutline.selectPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unselectPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setBuildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBuildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setRunTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetRunTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setBenchmarkTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.unsetBenchmarkTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.buildPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.testPackage",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.buildTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.runTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.benchTarget",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.setWorkspaceMemberFilter",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.editWorkspaceMemberFilter",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.clearWorkspaceMemberFilter",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.showTargetTypeFilter",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.clearTargetTypeFilter",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.clearAllFilters",
          "when": "never"
        },
        {
          "command": "cargo-tools.projectOutline.toggleWorkspaceMemberGrouping",
          "when": "never"
        }
      ]
    },
    "configuration": {
      "title": "Cargo Tools",
      "properties": {
        "cargoTools.defaultProfile": {
          "type": "string",
          "default": "dev",
          "description": "Default build profile to use",
          "enum": [
            "dev",
            "release"
          ],
          "enumDescriptions": [
            "Development profile with debug information",
            "Release profile with optimizations"
          ]
        },
        "cargoTools.cargoCommand": {
          "type": "string",
          "default": "cargo",
          "description": "Command to invoke instead of 'cargo'. This can be a custom wrapper or alternative cargo implementation. If the value contains whitespace, it will be split where the first part is the command and the remaining parts are treated as additional arguments."
        },
        "cargoTools.useRustAnalyzerEnvAndArgs": {
          "type": "boolean",
          "default": false,
          "description": "Use rust-analyzer settings for cargo command and environment. When enabled, reads rust-analyzer.cargo.extraArgs, rust-analyzer.cargo.extraEnv, rust-analyzer.runnables.extraArgs, and rust-analyzer.runnables.extraTestBinaryArgs to configure this extension."
        },
        "cargoTools.updateRustAnalyzerTarget": {
          "type": "boolean",
          "default": false,
          "description": "Automatically update rust-analyzer.cargo.target setting when Platform Selection changes. When enabled, changing the platform target will also set rust-analyzer's cargo target configuration."
        },
        "cargoTools.cargoPath": {
          "type": "string",
          "default": "cargo",
          "description": "Path to the cargo executable"
        },
        "cargoTools.extraEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Additional environment variables to set when running any cargo command"
        },
        "cargoTools.buildArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo build"
        },
        "cargoTools.run.extraArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to append to each invocation of running or debugging a target"
        },
        "cargoTools.run.extraEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Additional environment variables to set when running or debugging a target, merged with extraEnv"
        },
        "cargoTools.runArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo run"
        },
        "cargoTools.test.extraArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to append to each invocation of running tests or benchmarks"
        },
        "cargoTools.test.extraEnv": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "default": {},
          "description": "Additional environment variables to set when running tests or benchmarks, merged with extraEnv"
        },
        "cargoTools.testArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional arguments to pass to cargo test"
        },
        "cargoTools.environment": {
          "type": "object",
          "default": {},
          "description": "Environment variables to set when running cargo commands"
        },
        "cargoTools.features": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Default features to enable"
        },
        "cargoTools.allFeatures": {
          "type": "boolean",
          "default": false,
          "description": "Enable all features by default"
        },
        "cargoTools.noDefaultFeatures": {
          "type": "boolean",
          "default": false,
          "description": "Disable default features"
        },
        "cargoTools.runCommandOverride": {
          "type": "string",
          "default": "",
          "description": "Override command for 'cargo run'. If empty, 'cargo run' will be used. Use this to customize the run command (e.g., 'cargo watch -x run' or custom scripts)."
        },
        "cargoTools.testCommandOverride": {
          "type": "string",
          "default": "",
          "description": "Override command for 'cargo test'. If empty, 'cargo test' will be used. Use this to customize the test command (e.g., 'cargo nextest run' or custom scripts)."
        }
      }
    },
    "taskDefinitions": [
      {
        "type": "cargo",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "type": "string",
            "description": "The cargo command to run"
          },
          "profile": {
            "type": "string",
            "description": "The build profile to use"
          },
          "target": {
            "type": "string",
            "description": "The target to build"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Features to enable"
          },
          "allFeatures": {
            "type": "boolean",
            "description": "Enable all features"
          },
          "noDefaultFeatures": {
            "type": "boolean",
            "description": "Disable default features"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/vscode": "^1.102.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "eslint": "^9.25.1",
    "typescript": "^5.8.3",
    "ts-loader": "^9.5.2",
    "webpack": "^5.99.7",
    "webpack-cli": "^6.0.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2"
  }
}