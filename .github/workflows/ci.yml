name: CI

on:
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    # Enhanced npm cache with lockfile hash
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ matrix.node-version }}-
          ${{ runner.os }}-node-
    
    # Setup Rust toolchain for cargo-make
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    # Cache Rust dependencies
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          test-rust-project/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('test-rust-project/**/Cargo.lock', 'test-rust-project/**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    # Install cargo-make (cross-platform approach with better detection)
    - name: Check if cargo-make is installed
      id: check_cargo_make
      run: |
        echo "Checking for cargo-make installation..."
        if command -v cargo-make >/dev/null 2>&1; then
          echo "cargo-make command found in PATH"
          echo "installed=true" >> $GITHUB_OUTPUT
        elif cargo install --list | grep -q "^cargo-make "; then
          echo "cargo-make found in cargo install list"
          echo "installed=true" >> $GITHUB_OUTPUT
        else
          echo "cargo-make not found, will install"
          echo "installed=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
      continue-on-error: true
    
    - name: Install cargo-make
      if: steps.check_cargo_make.outputs.installed != 'true'
      run: |
        echo "Installing cargo-make..."
        cargo install cargo-make --force
        echo "cargo-make installation completed"
    
    - name: Install dependencies
      run: npm ci
    
    # Setup headless display before running any VS Code tests (Linux only)
    - name: Setup headless display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        echo "DISPLAY=:99.0" >> $GITHUB_ENV
    
    - name: Compile TypeScript
      run: npm run compile-tests
    
    - name: Compile extension
      run: npm run compile
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        # Needed for headless VS Code testing
        DISPLAY: :99.0

  build-package:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    # Enhanced npm cache
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-20.x-
          ${{ runner.os }}-node-
    
    # Cache webpack build artifacts
    - name: Cache webpack build
      uses: actions/cache@v4
      with:
        path: |
          out/
          dist/
          .webpack-cache/
        key: ${{ runner.os }}-webpack-${{ hashFiles('webpack.config.js', 'tsconfig.json', 'src/**/*.ts') }}
        restore-keys: |
          ${{ runner.os }}-webpack-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Package extension
      run: npx @vscode/vsce package
    
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: cargo-tools-extension
        path: '*.vsix'
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    # Enhanced npm cache
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-20.x-
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
